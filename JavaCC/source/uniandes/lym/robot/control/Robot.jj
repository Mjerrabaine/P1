/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	//private HashMap<String, Integer > funciones;

	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;

		//variables = new HashMap<String, Integer>();	
	}

	ArrayList<String> listaprog = new ArrayList<String>();
	ArrayList<String> listavar = new ArrayList<String>();
	HashMap<String, String > funciones = new HashMap<String, String>();
	String salida=new String();
}


PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

	< MOV:  "Mov" >
	| < RIGHT: "RIGHT" >
	| < PUT: "Put">
	| < PICK: "Pick">
	| < POP: "Pop" >
	| < GO: "GO" >
	| < VEER : "Veer" >
	| < INICORCH : "(" >
	| < ENDCORCH : ")" >
	| < NORTH : "North" >
	| < EAST : "East" >
	| < WEST : "West" >
	| < LOOK: "Look" >
	| < SOUTH : "South" >
    | < HOP:  "HOP" >
    | < STEP: "Step" >
    | < JUMP: "Jump" >
    | < JUMPTO: "JumpTo" >
    | < DROP: "Drop" >
    | < GRAB: "Grab" >
    | < GET: "Get" >
    | < FREE: "Free" >
    | < ISFACING : "Isfacing" >
    | < ISVALID : "Isvalid" >
    | < CANMOVE : "Canmove" >
    | < NOT : "Not" >
    |< If: "If" >
    |< ELSE : "Else">
    |< FI: "Fi" >
    |< REPEATTIMES: "Repeattimes" >
    |< PER: "Per" >
    |< WHILE: "While">
    |< OD:"Od" >
    |< DO:"Do" >
    |< COMM:"," >
    |< PROG:"Prog" >
    |< GORP:"Gorp" >
    |< PROC: "Proc" >
    |< ARROW: ":=" >
    |< LEFT: "Left" >
    |< AROUND: "Around" >
    |< VARIABLE: "Var" >
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		< NUM: (<DIGIT>)+ >
		| < #DIGIT: ["0"-"9"] >
		| < #UPPER : [ "A"-"Z" ] >
		| < #LOWER : [ "a"-"z" ] >
		| < VAR :  ( <UPPER> | <LOWER> ( <UPPER > | <LOWER> | <DIGIT> )* ) >
		| 	< WORD: (< LETTER >)+ >
		| 	< #LETTER: ["a"-"z"] >
        
}

/*
	boolean programa(Console sistema):
	{
	  salida = new String();
	}
	{
	  
	  (
	    < PROG>

	    //listvar()

	    " { "
	    (defun())+ " }"
	    
	            < GORP>

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;}
  }

  
  	void defun() :
{
	String j,l,m;
}
	{

	" { "
	    (block()) + " }"
	| 
	< PROC > < VAR > {l=token.image; listaprog.add(l);}
	< INICORCH >  < VAR >{m=token.image; listavar.add(m);}
	< COMM >  < VAR > {j=token.image; listavar.add(j);}
	< ENDCORCH >
	" { "
	(block())" }"

}

	void block() :
	{
		String salida;	
	}
	{
			//como hago para que salga mas veces	  	
	  	  inst() < COMM> inst()
	     {salida= "comando block";}
	}
	
	void inst() :
	{
			String salida;
	}
	{
	    //Controlstructure()
    	 //commandos()

    	 {salida= "comando instruccion";}
	}
	
 */
	void listvar() :
	{
		String salida, x;	
	}
	{
 	
	  	  < VARIABLE>  ((<VAR> <COMM>) 
	  	  (<VAR>))+ ";" {x=token.image; listavar.add(x);salida= "comando lista variables";}

	}


	
/*
		void Controlstructure() :
	{
			
	}
	{
	  (
	   	<INICORCH>
		(
		  
	    condicional()
	    | loop()
	    | repeat()
		) 		| < ENDCORCH >";" 
		//Se tiene que poner?
		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;}
    	
	}

	void loop() :
	{
		bool c;
	}
	{
        < WHILE>  condiciones() < DO >  block() < OD >
	}
	
	void repeat() :
	{
			
	}
	{
	  //falta n times
        < REPEATTIMES>  block() < PER >
	}

		void condicional() :
	{
			
	}
	{
	    condicionalif()
	    | condicionalelse()
	}

			void condicionalif() :
	{
			
	}
	{
        < If > condiciones() block() < ELSE > block() < FI >
	}


		void condicionalelse() :
	{
			
	}
	{
        < If > condiciones() block()

	}
	

		void condiciones() :
	{
			
	}
	{
	    < INICORCH >
	    (
	    < ISFACING > (< NORTH >|< WEST >|< EAST >|< SOUTH >)
	    //falta variable
	    | < ISVALID > (< GRAB >|< STEP >|< JUMP >|< FREE >|< PICK >|< DROP >) ","  
	    | < CANMOVE > (< NORTH >|< WEST >|< EAST >|< SOUTH >) ","
	    | < NOT > condiciones()
	    )
	    < ENDCORCH  >
	}
*/
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{
	  salida = new String();
	  String l,m,j;	
		
		int x,y;	
	}

	
	{
		
		(
		  <PROG>
		  listvar()
		  (
		    
		  < PROC > < VAR > {l=token.image; listaprog.add(l);}
			< INICORCH >  < VAR >{m=token.image; listavar.add(m);}
			< COMM >  < VAR > {j=token.image; listavar.add(j);}
			< ENDCORCH >
		 	"{"
		 	  
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}
		//		| 	<STEP>  "(" step()")"}
		//		| 	<DMOVE>  "(" Dmove() ")"}
		//		| 	<OMOVE>  "(" Omove() ")"}
		//		| 	<JUMPTO>  "(" jumpto() ")"}
		//		| 	<LOOK>  "(" look() ")"}
		//		| 	<GRAB>  "(" grab() ")"}
		//		| 	<FREE>  "(" free() ")"}
		//		| 	<ISVALID>  "(" isvalid() ")"} 
		//		| 	<CANMOVE>  "(" canmove() ")"}
		//		| 	<VAR>  "(" llamadofun() ")"}     
		|  <PUT> "("  put() ")"
		|  <PICK> "(" get()  ")"
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";"

		"}"
		)+
		<GORP>

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;}

	}
  
/*
	void step() :
	{
		int f=1;
		v=var();
		String p;
	{
		( <VAR>     {p=token.image; variables.put("step", p);}
		|  	  ( <PARAM>   v=var()
		|  	  ( <NUM>   f=num() {world.moveForward(x,false); salida = "Command:  Step foward n";})	 

	}
	

	void jumpto() :
	{
	  //tocaria definir 6 variables?
	  String v, p, pa;
	  Int f=0 ;
	  Int k=0 ;
	}
	{
	  (
	    
		( <VAR>     {p=token.image; variables.put("jumpto", p);}
		|  	  <PARAM>   v=var(); {world.moveForward(parametros.get(v),false); salida = "Command:  Step param";}}
		|  	   <NUM>   f=num() {world.moveForward(x,false); salida = "Command:  Step foward n";})
		)
		","
		( <VAR>     {pa=token.image; variables.put("step", pa);}
		|  	  <PARAM>   v=var(); {world.moveForward(parametros.get(v),false); salida = "Command:  Step param";}}
		|  	   <NUM>   k=num() {world.moveForward(x,false); salida = "Command:  Step foward n";})
		)

		//no estoy seguro
		if(f > 0 && k > 0 )		{
		  {world.setPosition(p,pa)}
		}
			 

	}

	void jump() :
	{
	  String v, p;
	  Int n;
	}
	{
	(
		( <VAR>     {p=token.image; variables.put("jump", p);}
		|  	  <PARAM>   v=var(); {world.moveForward(parametros.get(v),false); salida = "Command:  Step param";}}
		|  	   <NUM>   n=num() {world.moveForward(x,true); salida = "Command:  Jump n";})
		)
	)
}

/*
	void look() :
	{
	  //tocaria definir 6 variables?
	  String retorno;
	  String coordl;
	}
	{
	  (
	    (< NORTH >|< SOUTH >|< WEST >|< EAST >){ coordl=token.image;salida = "Command: Turnright";}
	    switch(coord) {
	     case "West" : 
	      	while (!world.facingWest()) { 
	      	world.turnRight(); }
	      	break;
	      	
	     case "South" :
	      	while (!world.facingSouth()) { 
	      	world.turnRight(); }
	      	break;
	      	
	   	 case "North" :
	     	 while (!world.facingNorth()) { 
	     	 world.turnRight(); }
	         break;
	         
	     case "East" :
	     	while (!world.facingEast()) { 
	     	world.turnRight(); }
	      	break;
	      	
	 }
	 retorno = "comando look";
	 return retorno;
	}
*/
/*
	void grab() :
	{
	  	String v, p;
		int f=0;	
	}
	{
		<VAR> {p=token.image(); variables.put	("jump", p);}
		|<PARAM>( v=token.image() {world.grabBalloons(f); salida = "Command:  Grab Balloons";})
		|<NUM>( f=token.image() {world.grabBalloons(f); salida = "Command:  Grab Balloons";})
		 		 

	}
	


	
	void pop() :
	{
	  	String v, p;
		int f=1;	
	}
	{
		<VAR>{p=token.image(); variables.put("jump", p);}
		|<PARAM> ( v=token.image() {world.popBalloons(f); salida = "Command:  Pop Balloons";})
		|<NUM>( f=token.image() {world.popBalloons(f); salida = "Command:  Pop Balloons";})
		 		 

	}

	void free() :
	{
	  	String v, p;
		int f=1;	
	}
	{
		<VAR>( f=num() {p=token.image(); variables.put("jump", p);}
		|<PARAM>( v=token.image() {world.putBalloons(f); salida = "Command:  Free Balloons";})
		|<NUM>( f=token.image() {world.puBalloons(f); salida = "Command:  Pop Balloons";}) 

	}
		
	void isvalid() :
	{
	  String s,j,g,po,p,f,d,k;
	  Int f;
	}
	{
	  
		(
		   <STEP>     s=token.image() //{s=token.image(); variables.put("jump", p);}
		|  	   <JUMP>   j=token.image() //{j=token.image(); variables.put("jump", p);}
		|  	   <GRAB>   g=token.image() //{g=token.image(); variables.put("jump", p);}
		|  	   <POP>   po=token.image() //{po=token.image(); variables.put("jump", p);}
		|  	   <PICK>   p=token.image() //{p=token.image(); variables.put("jump", p);}
		|  	   <FREE>   f=token.image() //{f=token.image(); variables.put("jump", p);}
		|  	   <DROP>   d=token.image() //{d=token.image(); variables.put("jump", p);}
		)
		","
		  (
		     <NUM> {f=token.image(); salida = "Command:  Grab Balloons";}
		|  	  ( <VAR>   k=token.image() {s=token.image(); variables.put("jump", p);})
			)		
	  	if(!s.isEmpy()) 	{
			world.moveForward(f);
		}
		else if(!j.isEmpy())	{
			world.moveForward(j);
		}
		else if(!g.isEmpy())	{
			world.moveForward(g);
		}

		else if(!po.isEmpy())	{
			world.moveForward(po);
		}
		else if(!p.isEmpy())	{
			world.moveForward(p);
		}
		else if(!f.isEmpy())	{
			world.moveForward(f);
		}
		else	{
			world.moveForward(d);
		}
		

	}

	void canmove() :
	{
	  String s,j,k;
	  Int f;
	}
	{
	  
		(< NORTH >|< SOUTH >|< WEST >|< EAST >){ coordl=token.image;salida = "Command: Turnright";}
	    switch(coord) {
	     case "West" : 
	      	while (!world.facingWest()) { 
	      	world.turnRight(); }
	      	break;
	      	
	     case "South" :
	      	while (!world.facingSouth()) { 
	      	world.turnRight(); }
	      	break;
	      	
	   	 case "North" :
	     	 while (!world.facingNorth()) { 
	     	 world.turnRight(); }
	         break;
	         
	     case "East" :
	     	while (!world.facingEast()) { 
	     	world.turnRight(); }
	      	break;
		","
		  ( <PARAM> f=token.image())}
		|  	  ( <VAR>   j=token.image())
		
	  	 

	}

	void veer() :
	{
	  String d;
	}

	{ (
	(< LEFT >|< RIGHT >|< AROUND >) {dir=token.image();}
		    switch(dir) {
	     case "L" : 
			{ world.turnRight();}
			{ world.turnRight();}
			{ world.turnRight();salida = "Command: Veer";}
	      	
	     case "R" :
			{ world.turnRight(); salida = "Command: Veer";}
	      	
	   	 case "A" :
			{ world.turnRight();}
			{ world.turnRight(); salida = "Command: Veer";}
		)
	
	}

	void isFacing() :
	{
	  String coord;
	}

	{ 

	(< NORTH >|< SOUTH >|< WEST >|< EAST >){ coordl=token.image;salida = "Command: Turnright";}
	    switch(coord) {
	     case "West" : 
	      	while (!world.facingWest()) { 
	      	world.turnRight(); }
	      	break;
	      	
	     case "South" :
	      	while (!world.facingSouth()) { 
	      	world.turnRight(); }
	      	break;
	      	
	   	 case "North" :
	     	 while (!world.facingNorth()) { 
	     	 world.turnRight(); }
	         break;
	         
	     case "East" :
	     	while (!world.facingEast()) { 
	     	world.tu
	
	}

	void get() :

	{
	  	String v, p;
		int f=1;	
	}
	{
		 <NUM> {f=token.image(); world.getChips(f); salida = "Command:  Get Chips";}
		| <VAR> {v=token.image(); variables.put("get", v)
		| <PARAM> p=token.image() {world.getChips(f); salida = "Command:  Get Chips";}
		 		 

	}

	
	void Omove() :
	{
	  String d;
	  String v;
	   String p;
	   int f;
	   
	}
	{
		( <VAR>    {v=token.image(); variables.put("Omove", v)
		|  	  ( <PARAM>   v=var(); {world.moveForward(parametros.get(v),false); salida = "Command:  Step param";}}
		|  	  ( <NUM>    {f=num();})

		","		
	  	< T_ROTATE > ("NORTH"|"SOUTH"|"EAST"|"WEST") {d= token.image ;} {
	    	switch(d) {
	     case "West" : 
	      	while (!world.facingWest()) { 
	      	world.turnRight(); }
	      	break;	      	
	     case "South" :
	      	while (!world.facingSouth()) { 
	      	world.turnRight(); }
	      	break;
	      	
	   	 case "North" :
	     	 while (!world.facingNorth()) { 
	     	 world.turnRight(); }
	         break;
	         
	     case "East" :
	     	while (!world.facingEast()) { 
	     	world.tu
  		}
  		{world.moveForward(f,false);}
	}

	void llamadofun() :
	{
		int f=1;
		String v;
		String p;	
	}
	{
		( <VAR>    {p=token.image();
		    		 if (!parametros.contains(p))
    		 			throw new  Error("funcion" + p + "no se ha definido aun");
    		 		else	{
    		 		  	metodocorrer();
    		 		  	}
		}

	}

	
*/	
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
