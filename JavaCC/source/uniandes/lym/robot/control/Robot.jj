/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashMap<String, Integer > variables;
	private HashMap<String, Integer > funciones;

	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;
		funciones = new HashMap<String, Integer>();
		variables = new HashMap<String, Integer>();	
	}

	String salida=new String();
}


PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

		< MOV:  "Mov" >
		| < RIGHT: "RIGHT" >
		| < PUT: "Put">
		| < PICK: "Pick">
		| < POP: "Pop" >
		| < GO: "GO" >
		| < VEER : "Veer" >
		| < INICORCH : "(" >
		| < ENDCORCH : ")" >
		| < NORTH : "North" >
		| < EAST : "East" >
		| < WEST : "West" >
		| < LOOK: "Look" >
		| < SOUTH : "South" >
        | < HOP:  "HOP" >
        | < STEP: "Step" >
        | < JUMP: "Jump" >
        | < JUMPTO: "JumpTo" >
        | < DROP: "Drop" >
        | < GRAB: "Grab" >
        | < GET: "Get" >
        | < FREE: "Free" >	

}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		< NUM: (<DIGIT>)+ >
		| < #DIGIT: ["0"-"9"] >
		| < #UPPER : [ "A"-"Z" ] >
		| < #LOWER : [ "a"-"z" ] >
		| < VAR :  ( <UPPER> | <LOWER> ( <UPPER > | <LOWER> | <DIGIT> )* )>
        
}

	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x;
		salida=new String();
		String temp;	
	}

	
	{
		(
		  (
		
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		| 	< INICORCH >{ temp =token.image; }  	look() 			 < ENDCORCH >{ temp =token.image; }   { sistema.append(temp);}		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}
	
String look() :
{ String retorno;
	String coorde; }
	{
	  < T_LOOK > (LOOKAHEAD() < NORTH >| LOOKAHEAD() < SOUTH > | LOOKAHEAD() < WEST > | LOOKAHEAD() < EAST >) {coorde= token.image; } {
	    switch(coorde) {
	   	 case "North" :
	     	 while (!world.facingNorth()) { 
	     	 world.turnRight(); }
	         break;
	      	
	     case "South" :
	      	while (!world.facingSouth()) { 
	      	world.turnRight(); }
	      	break;
	      		         
	     case "East" :
	     	while (!world.facingEast()) { 
	     	world.turnRight(); }
	      	break;
	      	
	     case "West" : 
	      	while (!world.facingWest()) { 
	      	world.turnRight(); }
	      	break;
	      	
	 }
	 retornar = "comando look";
	 return retorno;
	}
	
	
}
	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	
