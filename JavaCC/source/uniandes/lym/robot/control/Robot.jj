/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashMap<String, Integer > variables;
	private HashMap<String, Integer > funciones;

	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;
		funciones = new HashMap<String, Integer>();
		variables = new HashMap<String, Integer>();	
	}

	String salida=new String();
}


PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

	< MOV:  "Mov" >
	| < RIGHT: "RIGHT" >
	| < PUT: "Put">
	| < PICK: "Pick">
	| < POP: "Pop" >
	| < GO: "GO" >
	| < VEER : "Veer" >
	| < INICORCH : "(" >
	| < ENDCORCH : ")" >
	| < NORTH : "North" >
	| < EAST : "East" >
	| < WEST : "West" >
	| < LOOK: "Look" >
	| < SOUTH : "South" >
    | < HOP:  "HOP" >
    | < STEP: "Step" >
    | < JUMP: "Jump" >
    | < JUMPTO: "JumpTo" >
    | < DROP: "Drop" >
    | < GRAB: "Grab" >
    | < GET: "Get" >
    | < FREE: "Free" >
    | < ISFACING : "Isfacing" >
    | < ISVALID : "Isvalid" >
    | < CANMOVE : "Canmove" >
    | < NOT : "Not" >
    |< If: "If" >
    |< ELSE : "Else">
    |< FI: "Fi" >
    |< REPEATTIMES: "Repeattimes" >
    |< PER: "Per" >
}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		< NUM: (<DIGIT>)+ >
		| < #DIGIT: ["0"-"9"] >
		| < #UPPER : [ "A"-"Z" ] >
		| < #LOWER : [ "a"-"z" ] >
		| < VAR :  ( <UPPER> | <LOWER> ( <UPPER > | <LOWER> | <DIGIT> )* ) >
        
}

/*

	void block() :
	{
			
	}
	{
	     (inst(),)+ inst()
	}
	
	void inst() :
	{
			
	}
	{
	    Controlstructure()
    	| Command()
	}
	

		boolean Controlstructure() :
	{
			
	}
	{
	    condicional()
	    | loop()
	    | repeat()
		) ";" 
		//Se tiene que poner?
		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

		void conditional() :
	{
			
	}
	{
	    condicionalif()
	    | condicionalelse()
	}

			void condicionalif() :
	{
			
	}
	{
        < If > conditiones() block() < ELSE > block() < FI >
	}


		void condicionalelse() :
	{
			
	}
	{
        < If > condition() blockI()

	}
	

		void condition() :
	{
			
	}
	{
	    < INICORCH >
	    (
	    < ISFACING > (< NORTH >|< WEST >|< EAST >|< SOUTH >)
	    //falta variable
	    | < ISVALID > (< GRAB >|< STEP >|< JUMP >|< FREE >|< PICK >|< DROP >) ","  
	    | < CANMOVE > (< NORTH >|< WEST >|< EAST >|< SOUTH >) ","
	    | < T_NOT > condition()
	    )
	    < ENDCORCH  >
	}

*/
	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}

	
	{
		(
		  (
		   <RIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}
		//| 	<STEP>  "(" step()")"
		//		| 	<DMOVE>  "(" Dmove() ")"}
		//		| 	<OMOVE>  "(" Omove() ")"}       
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) ";" 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+

    	| <EOF> {return false;} 
	}

/*
	void step() :
	{
		int f=1;
		v=var();
		p=param();	
	}
	{
		( <VAR>     p=param() {world.moveForward(parametros.get(p),false); salida = "Command:  Step foward var";}}
		|  	  ( <PARAM>   v=var(); {world.moveForward(parametros.get(v),false); salida = "Command:  Step param";}}
		|  	  ( <NUM>   f=num() {world.moveForward(x,false); salida = "Command:  Step foward n";})	 

	}

	void veer() :
	{
	  String d;
	}

	{ (
	( < VAR > d=var()
	)

	< VEER > // {dir=token.image; world.veer(d); salida = "Command: Veer in direction d";}
	
	}

	void Dmove() :
	{
	  String v, p;
	  Int f;
	}
	{
	  
		(
		  ( <VAR>     v=var()}
		|  	  ( <PARAM>   p=param()
		|  	  ( <NUM>   f=num()
)
		","
		(<Front>  //{dir=token.image; world.moveForward(x,false); salida = "Command:  Step foward n";}
		|<BACK>) //{dir=token.image;  world.moveForward() ;}
		
	  	 

	}
	
	void Omove() :
	{
	  String d;
	   String p;
	   
	}
	{
		( <VAR>     p=param() {world.moveForward(parametros.get(p),false); salida = "Command:  Step foward var";}}
		|  	  ( <PARAM>   v=var(); {world.moveForward(parametros.get(v),false); salida = "Command:  Step param";}}
		|  	  ( <NUM>   f=num() {world.moveForward(x,false); salida = "Command:  Step foward n";})



		
	  	< T_ROTATE > ("north"|"south"|"east"|"west") {d= token.image ;} {
	    if (d.equalsIgnoreCase("North")) { world.turnRight();world.turnRight();world.turnRight(); }
	    else if (d.equalsIgnoreCase("back")) { world.turnRight();world.turnRight(); }
	    else if (d.equalsIgnoreCase("right")) { world.turnRight(); }
	    retornar= "comando Omove";
  }
  {
    return retornar; }	 

	}
	
*/	
	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}
	
